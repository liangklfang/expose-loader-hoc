'use strict';

var _form = require('antd/lib/form');

var _form2 = _interopRequireDefault(_form);

var _button = require('antd/lib/button');

var _button2 = _interopRequireDefault(_button);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

require('antd/lib/form/style');

require('antd/lib/button/style');

var _index = require('./index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FormItem = _form2.default.Item;

var MyForm = function (_React$Component) {
  _inherits(MyForm, _React$Component);

  function MyForm(props) {
    _classCallCheck(this, MyForm);

    var _this = _possibleConstructorReturn(this, (MyForm.__proto__ || Object.getPrototypeOf(MyForm)).call(this, props));

    _this.handleSubmit = function (e) {
      e.preventDefault();
      _this.props.form.validateFields(function (err, values) {
        if (!err) {
          console.log('Received values of form: ', values);
        }
      });
    };

    _this.state = {
      status: 0
    };
    return _this;
  }

  _createClass(MyForm, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      setTimeout(function () {
        _this2.props.form.setFieldsValue({ open: 1 });
      }, 1000);
    }
  }, {
    key: 'render',
    value: function render() {
      var getFieldDecorator = this.props.form.getFieldDecorator;

      var props = {
        checkedChildren: '上线',
        unCheckedChildren: '下线'
      };

      // Only show error after a field is touched.
      return _react2.default.createElement(
        _form2.default,
        { onSubmit: this.handleSubmit },
        _react2.default.createElement(
          FormItem,
          null,
          getFieldDecorator('open', {
            initialValue: this.state.status
          })(_react2.default.createElement(_index2.default, props))
        ),
        _react2.default.createElement(
          FormItem,
          null,
          _react2.default.createElement(
            _button2.default,
            {
              type: 'primary',
              htmlType: 'submit'
            },
            '\u67E5\u770B'
          )
        )
      );
    }
  }]);

  return MyForm;
}(_react2.default.Component);

var WrappedMyForm = _form2.default.create()(MyForm);

// write your demo code here, below is an example

ReactDOM.render(_react2.default.createElement(WrappedMyForm, null), document.getElementById('app'));