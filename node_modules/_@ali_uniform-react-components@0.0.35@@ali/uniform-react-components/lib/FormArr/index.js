'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _button = require('antd/lib/button');

var _button2 = _interopRequireDefault(_button);

var _icon = require('antd/lib/icon');

var _icon2 = _interopRequireDefault(_icon);

var _form = require('antd/lib/form');

var _form2 = _interopRequireDefault(_form);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

require('antd/lib/button/style');

require('antd/lib/icon/style');

require('antd/lib/form/style');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FormItem = _form2.default.Item;

// 默认的 FormItemLayout
var DefaultFormItemLayout = {
  labelCol: { span: 7 },
  wrapperCol: { span: 11 }
};

var uuid = 0;

var FormArr = function (_React$Component) {
  _inherits(FormArr, _React$Component);

  function FormArr(props) {
    _classCallCheck(this, FormArr);

    var _this = _possibleConstructorReturn(this, (FormArr.__proto__ || Object.getPrototypeOf(FormArr)).call(this, props));

    _this.add = function () {
      var keys = _this.state.keys;
      var nextKeys = keys.concat(uuid);
      _this.setState({ keys: nextKeys });
      uuid++;
    };

    _this.remove = function (k) {
      var keys = _this.state.keys;
      if (keys.length === 1) {
        return;
      }

      _this.setState({
        keys: keys.filter(function (key) {
          return key !== k;
        })
      });
    };

    _this.state = {
      keys: []
    };
    return _this;
  }

  _createClass(FormArr, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var data = this.props.data;

      this.initKeys(data);
    }
  }, {
    key: 'initKeys',
    value: function initKeys(data) {
      var initArr = data;
      uuid = 0;
      var keys = [];
      if (initArr) {
        for (var i = 0; i < initArr.length; i++) {
          keys.push(uuid);
          uuid++;
        }
      }
      this.setState({ keys: keys });
    }

    // 添加数组元素


    // 删除数组元素

  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          addText = _props.addText,
          data = _props.data;
      var keys = this.state.keys;
      var getFieldDecorator = this.props.form.getFieldDecorator;

      var formItemLayout = this.props.formItemLayout || DefaultFormItemLayout;
      var formItemLayoutWithOutLabel = {
        wrapperCol: {
          span: formItemLayout.wrapperCol.span,
          offset: formItemLayout.labelCol.span
        }
      };

      return _react2.default.createElement(
        'div',
        { className: 'FormArr-wrapper' },
        keys.map(function (k) {
          return _react2.default.createElement(
            'div',
            { key: k, className: 'form-arr-group' },
            getFieldDecorator('name[' + k + ']', {
              initialValue: data && data.name && data.name[k]
            })(_this2.props.children),
            keys.length > 1 ? _react2.default.createElement(_icon2.default, {
              className: 'dynamic-delete-button',
              type: 'minus-circle-o',
              disabled: keys.length === 1,
              onClick: function onClick() {
                return _this2.remove(k);
              }
            }) : null
          );
        }),
        _react2.default.createElement(
          FormItem,
          formItemLayoutWithOutLabel,
          _react2.default.createElement(
            _button2.default,
            { type: 'dashed', onClick: this.add, style: { width: '100%' } },
            _react2.default.createElement(_icon2.default, { type: 'plus' }),
            ' ',
            addText || '添加'
          )
        )
      );
    }
  }]);

  return FormArr;
}(_react2.default.Component);

FormArr.propTypes = {
  form: _propTypes2.default.object, // 父组件的 this.props.form
  addText: _propTypes2.default.string, // 添加数组项的文案
  data: _propTypes2.default.array,
  model: _propTypes2.default.string // 表单项 model 名
};


FormArr.displayName = 'FormArr';

exports.default = FormArr;
module.exports = exports['default'];