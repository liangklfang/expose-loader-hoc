'use strict';

/**
 * fetch api 封装
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _urlSearchParams = require('url-search-params');

var _urlSearchParams2 = _interopRequireDefault(_urlSearchParams);

var _fetchJsonp = require('fetch-jsonp');

var fetch_jsonp = _interopRequireWildcard(_fetchJsonp);

var _serializeData = require('../Utils/serializeData');

var _serializeData2 = _interopRequireDefault(_serializeData);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

window.URLSearchParams = window.URLSearchParams || _urlSearchParams2.default;
var fetchJsonpRaw = fetch_jsonp.default;

/**
 * fetch get 请求封装
 * @param {String} url 请求 url
 * @param {Object} data 请求数据
 * @param {Object} params 请求设置参数
 */
function fetchGet(url, data) {
  var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : { credentials: 'include' };

  var u = setUrlSearchParams(data);
  return fetchW(url + '?' + u, params);
}

/**
 * fetch post 请求封装
 * @param {String} url 请求 url
 * @param {Object} data 请求数据
 * @param {Object} params 请求设置参数
 */
function fetchPost(url, data, params) {
  return fetchW(url, _extends({
    method: 'POST',
    body: (0, _serializeData2.default)(data),
    credentials: 'include',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'
    }
  }, params));
}

/**
 * fetch put 请求封装
 */
function fetchPut(url, data, params) {
  return fetchW(url, _extends({
    method: 'PUT',
    body: (0, _serializeData2.default)(data),
    credentials: 'include',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'
    }
  }, params));
}

/**
 * fetch delete 请求封装
 */
function fetchDel(url, data, params) {
  return fetchW(url, _extends({
    method: 'DELETE',
    body: (0, _serializeData2.default)(data),
    credentials: 'include',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'
    }
  }, params));
}

function fetchPostFormData(url, data, params) {
  return fetchW(url, _extends({
    method: 'POST',
    body: setFormData(data),
    credentials: 'include'
  }, params));
}

/**
 * fetch jsonp 请求封装
 * @param {String} url 请求 url
 * @param {Object} data 请求数据
 */
function fetchJsonp(url, data) {
  var u = setUrlSearchParams(data);
  return fetchJsonpW(url + '?' + u);
}

/**
 * 对 fetch 过程的通用包装
 */
function fetchW(req, opt) {
  return fetch(req, opt).then(checkStatus).catch(function (err) {
    console.error('fetch failed: ', err.response); // eslint-disable-line
    // 这里需要返回 response，后端可能返回错误码，并将错误信息放在 response 中
    // 需要返回给用户自己处理
    return err.response;
  }).then(parseJSON).catch(function (err) {
    console.error('json.parse() error: ', err); // eslint-disable-line
    // 返回自定义的错误信息
    return {
      message: '\u89E3\u6790\u63A5\u53E3\u8FD4\u56DE\u5185\u5BB9\u51FA\u9519' + err + '\uFF0C\u8BF7\u786E\u8BA4\u4F60\u7684\u63A5\u53E3\u6CA1\u95EE\u9898\uFF01',
      success: false
    };
  }).then(function (data) {
    return data;
  });
}

/**
 * 对 fetch-jsonp 过程对通用包装
 */
function fetchJsonpW(req) {
  return fetchJsonpRaw(req).then(parseJSON).then(function (data) {
    return data;
  });
}

/**
 * change data to URLSearchParams
 */
function setUrlSearchParams(data) {
  var urlSearchParams = new URLSearchParams();
  for (var name in data) {
    urlSearchParams.append(name, data[name]);
  }
  return urlSearchParams;
}

/**
 * change data to formData
 */
function setFormData(data) {
  var formData = new FormData();
  for (var name in data) {
    formData.append(name, data[name]);
  }
  return formData;
}

/**
 * Promise 超时处理, 可用于处理 fetch 请求超时
 */
function setPromiseTimeout(promise, ms) {
  return new Promise(function (resolve, reject) {
    setTimeout(function () {
      reject('request timeout');
    }, ms);
    promise.then(resolve, reject);
  });
}

/**
 * fetch 不会 reject http 请求的错误状态（error status 比如 404 或 500）
 * 可以自己对 response 做处理
 */
function checkStatus(response) {
  if (response.status >= 200 && response.status < 300) {
    return response;
  } else {
    var error = new Error(response.statusText);
    error.response = response;
    throw error;
  }
}

/**
 * 从 response 中解析出 json
 */
function parseJSON(response) {
  return response.json();
}

exports.default = {
  fetchGet: fetchGet,
  fetchPost: fetchPost,
  fetchPut: fetchPut,
  fetchDel: fetchDel,
  fetch: fetchW,
  fetchJsonp: fetchJsonp,
  fetchPostFormData: fetchPostFormData,
  setUrlSearchParams: setUrlSearchParams,
  setFormData: setFormData,
  setPromiseTimeout: setPromiseTimeout
};
module.exports = exports['default'];