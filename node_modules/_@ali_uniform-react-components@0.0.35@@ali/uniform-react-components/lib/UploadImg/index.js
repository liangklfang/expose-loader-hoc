'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _modal = require('antd/lib/modal');

var _modal2 = _interopRequireDefault(_modal);

var _upload = require('antd/lib/upload');

var _upload2 = _interopRequireDefault(_upload);

var _button = require('antd/lib/button');

var _button2 = _interopRequireDefault(_button);

var _icon = require('antd/lib/icon');

var _icon2 = _interopRequireDefault(_icon);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

require('antd/lib/modal/style');

require('antd/lib/upload/style');

require('antd/lib/button/style');

require('antd/lib/icon/style');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ImgUtils = require('../Utils/ImgUtils');

var _ImgUtils2 = _interopRequireDefault(_ImgUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // 图片上传组件

var UploadImg = function (_React$Component) {
  _inherits(UploadImg, _React$Component);

  function UploadImg(props) {
    _classCallCheck(this, UploadImg);

    var _this = _possibleConstructorReturn(this, (UploadImg.__proto__ || Object.getPrototypeOf(UploadImg)).call(this, props));

    _initialiseProps.call(_this);

    var len = _this.props.length || 1;
    var files = _this.props.value || null;
    var fileList = _this.setFileList(len, files);

    _this.state = {
      len: len,
      previewVisible: false,
      previewImage: '',
      fileList: fileList
    };
    return _this;
  }

  _createClass(UploadImg, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var len = this.state.len;

      if ('value' in nextProps && nextProps.value != this.props.value) {
        var files = nextProps.value;
        var fileList = files.fileList || this.setFileList(len, files);
        if (JSON.stringify(fileList) != JSON.stringify(this.state.fileList)) {
          // 防止多次渲染图片
          this.setState({ fileList: fileList });
        }
      }
    }

    /**
     * 设置 fileList
     * @param {Number} len fileList 的长度
     * @param {Array or String} files 文件url
     * @return {Array} fileList 数组
     */

  }, {
    key: 'setFileList',
    value: function setFileList(len, files) {
      var listType = this.props.listType;

      var preName = listType === 'text' ? '文件' : '图片';
      var fileList = [];
      if (len > 1) {
        // 上传多张图片时
        fileList = files ? files.map(function (file, index) {
          return {
            uid: -index,
            name: '' + preName + index,
            status: 'done',
            url: _ImgUtils2.default.getFullUrl(file)
          };
        }) : [];
      } else {
        // 上传单张图片时
        var file = files;
        fileList = file ? [{
          uid: -1,
          name: preName,
          status: 'done',
          url: _ImgUtils2.default.getFullUrl(file)
        }] : [];
      }
      return fileList;
    }
  }, {
    key: 'render',
    value: function render() {
      var _state = this.state,
          previewVisible = _state.previewVisible,
          previewImage = _state.previewImage,
          fileList = _state.fileList,
          len = _state.len;
      var _props = this.props,
          keepUploadBtn = _props.keepUploadBtn,
          _props$uploadText = _props.uploadText,
          uploadText = _props$uploadText === undefined ? '点击上传图片' : _props$uploadText;
      // 处理图片域名前缀

      fileList.map(function (file) {
        file.url = _ImgUtils2.default.getFullUrl(file.url);
      });
      var props = _extends({
        action: '/common/ajaxUploadImg.json',
        listType: "picture",
        fileList: fileList,
        onPreview: this.handlePreview,
        onChange: this.handleChange,
        withCredentials: true
      }, this.props);
      var uploadButton = this.props.listType == 'picture-card' ? _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(_icon2.default, { type: 'plus' }),
        _react2.default.createElement(
          'div',
          { className: 'ant-upload-text' },
          uploadText
        )
      ) : _react2.default.createElement(
        _button2.default,
        null,
        _react2.default.createElement(_icon2.default, { type: 'upload' }),
        ' ',
        uploadText
      );
      return _react2.default.createElement(
        'div',
        { className: 'clearfix upload-img' },
        _react2.default.createElement(
          _upload2.default,
          _extends({}, props, { onChange: this.handleChange }),
          fileList.length >= len && !keepUploadBtn ? null : uploadButton
        ),
        _react2.default.createElement(
          _modal2.default,
          { visible: previewVisible, footer: null, onCancel: this.handleCancel },
          _react2.default.createElement('img', { alt: 'example', style: { width: '100%' }, src: previewImage })
        )
      );
    }
  }]);

  return UploadImg;
}(_react2.default.Component);

var _initialiseProps = function _initialiseProps() {
  var _this2 = this;

  this.handleCancel = function () {
    _this2.setState({ previewVisible: false });
  };

  this.handlePreview = function (file) {
    _this2.setState({
      previewImage: file.url || file.thumbUrl,
      previewVisible: true
    });
  };

  this.handleChange = function (info) {
    var fileList = info.fileList;
    _this2.setState({ fileList: fileList });
    var onChange = _this2.props.onChange;
    var onFileChange = _this2.props.onFileChange;
    if (onChange && (info.file.status === 'done' || info.file.status === 'removed')) {
      // 保留按钮，处理用户自己处理图片的情况
      if (_this2.props.keepUploadBtn) {
        if (info.file && info.file.response && info.file.response.success == true) {
          onChange(info.file.response.data.relativePath);
          onFileChange && onFileChange(info.file);
        } else {
          onChange('');
          onFileChange && onFileChange(info.file);
          if (info.file && info.file.response && info.file.response.success == false) {
            _modal2.default.error({
              title: '出错',
              content: '上传图片出错，' + (info.file && info.file.response && info.file.response.message)
            });
          }
        }
        return;
      }
      if (_this2.state.len > 1) {
        var files = fileList.map(function (item) {
          if (item && item.response && item.response.success == true) {
            return _ImgUtils2.default.removeImgHost(item.response.data.path);
          } else {
            return _ImgUtils2.default.removeImgHost(item.url);
          }
        });
        onChange(files);
        onFileChange && onFileChange(fileList);
      } else {
        if (fileList[0] && fileList[0].response && fileList[0].response.success == true) {
          onChange(_ImgUtils2.default.removeImgHost(fileList[0].response.data.path));
          onFileChange && onFileChange(fileList[0]);
        } else {
          onChange('');
          onFileChange && onFileChange(fileList[0]);
          if (fileList[0] && fileList[0].response && fileList[0].response.success == false) {
            _modal2.default.error({
              title: '出错',
              content: '上传图片出错，' + (fileList[0] && fileList[0].response && fileList[0].response.message)
            });
          }
        }
      }
    }
  };
};

exports.default = UploadImg;
module.exports = exports['default'];