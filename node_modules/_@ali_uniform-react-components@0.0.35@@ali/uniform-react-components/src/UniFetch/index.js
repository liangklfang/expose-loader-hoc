'use strict';

/**
 * fetch api 封装
 */
import URLSearchParamsPoly from 'url-search-params';
import * as fetch_jsonp from 'fetch-jsonp';
import serializeData from '../Utils/serializeData';

window.URLSearchParams = window.URLSearchParams || URLSearchParamsPoly;
const fetchJsonpRaw = fetch_jsonp.default;

/**
 * fetch get 请求封装
 * @param {String} url 请求 url
 * @param {Object} data 请求数据
 * @param {Object} params 请求设置参数
 */
function fetchGet(url, data, params = { credentials: 'include' }) {
  let u = setUrlSearchParams(data);
  return fetchW(url + '?' +  u, params);
}

/**
 * fetch post 请求封装
 * @param {String} url 请求 url
 * @param {Object} data 请求数据
 * @param {Object} params 请求设置参数
 */
function fetchPost(url, data, params) {
  return fetchW(url, {
    method: 'POST',
    body: serializeData(data),
    credentials: 'include',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'
    },
    ...params
  });
}

/**
 * fetch put 请求封装
 */
function fetchPut(url, data, params) {
  return fetchW(url, {
    method: 'PUT',
    body: serializeData(data),
    credentials: 'include',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'
    },
    ...params
  });
}

/**
 * fetch delete 请求封装
 */
function fetchDel(url, data, params) {
  return fetchW(url, {
    method: 'DELETE',
    body: serializeData(data),
    credentials: 'include',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'
    },
    ...params
  });
}

function fetchPostFormData(url, data, params) {
  return fetchW(url, {
    method: 'POST',
    body: setFormData(data),
    credentials: 'include',
    ...params
  });
}

/**
 * fetch jsonp 请求封装
 * @param {String} url 请求 url
 * @param {Object} data 请求数据
 */
function fetchJsonp(url, data) {
  let u = setUrlSearchParams(data);
  return fetchJsonpW(url + '?' + u);
}

/**
 * 对 fetch 过程的通用包装
 */
function fetchW(req, opt) {
  return fetch(req, opt)
  .then(checkStatus)
  .catch(err => {
    console.error('fetch failed: ', err.response); // eslint-disable-line
    // 这里需要返回 response，后端可能返回错误码，并将错误信息放在 response 中
    // 需要返回给用户自己处理
    return err.response;
  })
  .then(parseJSON)
  .catch(err => {
    console.error('json.parse() error: ', err); // eslint-disable-line
    // 返回自定义的错误信息
    return {
      message: `解析接口返回内容出错${err}，请确认你的接口没问题！`,
      success: false
    }
  })
  .then(data => {
    return data;
  });
}

/**
 * 对 fetch-jsonp 过程对通用包装
 */
function fetchJsonpW(req) {
  return fetchJsonpRaw(req)
  .then(parseJSON)
  .then(data => {
    return data;
  })
}

/**
 * change data to URLSearchParams
 */
function setUrlSearchParams(data) {
  let urlSearchParams = new URLSearchParams();
  for (let name in data) {
    urlSearchParams.append(name, data[name]);
  }
  return urlSearchParams;
}

/**
 * change data to formData
 */
function setFormData(data) {
  let formData = new FormData();
  for (let name in data) {
    formData.append(name, data[name]);
  }
  return formData;
}

/**
 * Promise 超时处理, 可用于处理 fetch 请求超时
 */
function setPromiseTimeout(promise, ms) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      reject('request timeout');
    }, ms);
    promise.then(resolve, reject);
  });
}

/**
 * fetch 不会 reject http 请求的错误状态（error status 比如 404 或 500）
 * 可以自己对 response 做处理
 */
function checkStatus(response) {
  if (response.status >= 200 && response.status < 300) {
    return response;
  } else {
    var error = new Error(response.statusText);
    error.response = response;
    throw error;
  }
}

/**
 * 从 response 中解析出 json
 */
function parseJSON(response) {
  return response.json()
}

export default {
  fetchGet: fetchGet,
  fetchPost: fetchPost,
  fetchPut: fetchPut,
  fetchDel: fetchDel,
  fetch: fetchW,
  fetchJsonp: fetchJsonp,
  fetchPostFormData: fetchPostFormData,
  setUrlSearchParams,
  setFormData,
  setPromiseTimeout
};
