// 图片上传组件

import React from 'react';
import { Upload, Icon, Modal, Button } from 'antd';
import ImgUtils from '../Utils/ImgUtils';

class UploadImg extends React.Component {
  constructor(props) {
    super(props);

    const len = this.props.length || 1;
    const files = this.props.value || null;
    const fileList = this.setFileList(len, files);

    this.state = {
      len,
      previewVisible: false,
      previewImage: '',
      fileList: fileList
    };
  }

  componentWillReceiveProps(nextProps) {
    const {len} = this.state;
    if (('value' in nextProps) && nextProps.value != this.props.value) {
      const files = nextProps.value;
      let fileList = files.fileList || this.setFileList(len, files);
      if (JSON.stringify(fileList) != JSON.stringify(this.state.fileList)) { // 防止多次渲染图片
        this.setState({fileList});
      }
    }
  }

  /**
   * 设置 fileList
   * @param {Number} len fileList 的长度
   * @param {Array or String} files 文件url
   * @return {Array} fileList 数组
   */
  setFileList(len, files) {
    const { listType } = this.props;
    let preName = listType === 'text' ? '文件' : '图片';
    let fileList = [];
    if (len > 1) { // 上传多张图片时
      fileList = files ? files.map((file, index) => {
        return {
          uid: -index,
          name: `${preName}${index}`,
          status: 'done',
          url: ImgUtils.getFullUrl(file)
        }
      }) : [];
    } else { // 上传单张图片时
      let file = files;
      fileList = file ? [{
        uid: -1,
        name: preName,
        status: 'done',
        url: ImgUtils.getFullUrl(file)
      }] : [];
    }
    return fileList;
  }

  handleCancel = () => {
    this.setState({ previewVisible: false });
  }

  handlePreview = (file) => {
    this.setState({
      previewImage: file.url || file.thumbUrl,
      previewVisible: true
    });
  }

  handleChange = (info) => {
    const fileList = info.fileList;
    this.setState({ fileList });
    const onChange = this.props.onChange;
    const onFileChange = this.props.onFileChange;
    if (onChange && (info.file.status === 'done' || info.file.status === 'removed')) {
      // 保留按钮，处理用户自己处理图片的情况
      if (this.props.keepUploadBtn) {
        if (info.file && info.file.response && info.file.response.success == true) {
          onChange(info.file.response.data.relativePath);
          onFileChange && onFileChange(info.file);
        } else {
          onChange('');
          onFileChange && onFileChange(info.file);
          if (info.file && info.file.response && info.file.response.success == false) {
            Modal.error({
              title: '出错',
              content: '上传图片出错，' + (info.file && info.file.response && info.file.response.message)
            });
          }
        }
        return;
      }
      if (this.state.len > 1) {
        const files = fileList.map((item) => {
          if (item && item.response && item.response.success == true) {
            return ImgUtils.removeImgHost(item.response.data.path);
          } else {
            return ImgUtils.removeImgHost(item.url);
          }
        });
        onChange(files);
        onFileChange && onFileChange(fileList);
      } else {
        if (fileList[0] && fileList[0].response && fileList[0].response.success == true) {
          onChange(ImgUtils.removeImgHost(fileList[0].response.data.path));
          onFileChange && onFileChange(fileList[0]);
        } else {
          onChange('');
          onFileChange && onFileChange(fileList[0]);
          if (fileList[0] && fileList[0].response && fileList[0].response.success == false) {
            Modal.error({
              title: '出错',
              content: '上传图片出错，' + (fileList[0] && fileList[0].response && fileList[0].response.message)
            });
          }
        }
      }
    }
  }

  render() {
    const { previewVisible, previewImage, fileList, len } = this.state;
    const { keepUploadBtn, uploadText='点击上传图片' } = this.props;
    // 处理图片域名前缀
    fileList.map(file => {
      file.url = ImgUtils.getFullUrl(file.url);
    });
    const props = {
      action: `/common/ajaxUploadImg.json`,
      listType: "picture",
      fileList: fileList,
      onPreview: this.handlePreview,
      onChange: this.handleChange,
      withCredentials: true,
      ...this.props
    }
    const uploadButton = this.props.listType == 'picture-card' ? (
      <div>
        <Icon type="plus" />
        <div className="ant-upload-text">{uploadText}</div>
      </div>
    ) : (
      <Button>
        <Icon type="upload" /> {uploadText}
      </Button>
    );
    return (
      <div className="clearfix upload-img">
        <Upload {...props} onChange={this.handleChange}>
          {fileList.length >= len && !keepUploadBtn ? null : uploadButton}
        </Upload>
        <Modal visible={previewVisible} footer={null} onCancel={this.handleCancel}>
          <img alt="example" style={{ width: '100%' }} src={previewImage} />
        </Modal>
      </div>
    );
  }
}

export default UploadImg;
