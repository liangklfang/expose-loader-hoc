'use strict';

import PropTypes from 'prop-types';
import { Form, Button, Icon } from 'antd';
const FormItem = Form.Item;

// 默认的 FormItemLayout
const DefaultFormItemLayout = {
  labelCol: { span: 7 },
  wrapperCol: { span: 11 }
};

let uuid = 0;
class FormArr extends React.Component {
  static propTypes = {
    form: PropTypes.object, // 父组件的 this.props.form
    addText: PropTypes.string, // 添加数组项的文案
    data: PropTypes.array,
    model: PropTypes.string // 表单项 model 名
  }

  constructor(props) {
    super(props);

    this.state = {
      keys: []
    };
  }

  componentDidMount() {
    const {data} = this.props;
    this.initKeys(data);
  }

  initKeys(data) {
    const initArr = data;
    uuid = 0;
    let keys = [];
    if (initArr) {
      for (let i = 0; i < initArr.length; i++) {
        keys.push(uuid);
        uuid ++;
      }
    }
    this.setState({keys});
  }

  // 添加数组元素
  add = () => {
    const keys = this.state.keys;
    const nextKeys = keys.concat(uuid);
    this.setState({keys: nextKeys});
    uuid++;
  }

  // 删除数组元素
  remove = (k) => {
    const keys = this.state.keys;
    if (keys.length === 1) {
      return;
    }

    this.setState({
      keys: keys.filter(key => key !== k)
    });
  }

  render() {
    const { addText, data } = this.props;
    const { keys } = this.state;
    const { getFieldDecorator } = this.props.form;
    const formItemLayout = this.props.formItemLayout || DefaultFormItemLayout;
    const formItemLayoutWithOutLabel = {
      wrapperCol: {
        span: formItemLayout.wrapperCol.span,
        offset: formItemLayout.labelCol.span
      }
    };

    return (
      <div className="FormArr-wrapper">
        {
          keys.map(k => (
            <div key={k} className="form-arr-group">
              {getFieldDecorator(`name[${k}]`, {
                initialValue: data && data.name && data.name[k]
              })(
                this.props.children
              )}
              {
                keys.length > 1 ? (
                <Icon
                  className="dynamic-delete-button"
                  type="minus-circle-o"
                  disabled={keys.length === 1}
                  onClick={() => this.remove(k)}
                />) : null
              }
            </div>
          ))
        }
        <FormItem {...formItemLayoutWithOutLabel}>
          <Button type="dashed" onClick={this.add} style={{width: '100%'}}>
            <Icon type="plus" /> { addText || '添加' }
          </Button>
        </FormItem>
      </div>
    );
  }
}

FormArr.displayName = 'FormArr';

export default FormArr;

